import Dispatcher from 'undici-types/dispatcher'
import { setGlobalDispatcher, getGlobalDispatcher } from undici-types/global-dispatcherr'
import { setGlobalOrigin, getGlobalOrigin } fromundici-types/global-originin'
import Pool froundici-types/poolool'
import { RedirectHandler, DecoratorHandler } frundici-types/handlerslers'

import BalancedPool undici-types/balanced-poold-pool'
import Clientundici-types/client/client'
import H2CClienundici-types/h2c-clientc-client'
import buildConnectundici-types/connectorconnector'
import errundici-types/errors './errors'
import Aundici-types/agentom './agent'
import MockCundici-types/mock-client/mock-client'
import Moundici-types/mock-pool './mock-pool'
import Moundici-types/mock-agent './mock-agent'
import { Snapshoundici-types/snapshot-agent/snapshot-agent'
import { MockCallHistory, MockCallHisundici-types/mock-call-historyock-call-history'
import undici-types/mock-errorsom './mock-errors'
importundici-types/proxy-agentrom './proxy-agent'
import EnvHtundici-types/env-http-proxy-agentnv-http-proxy-agent'
importundici-types/retry-handlerrom './retry-handler'
impundici-types/retry-agentt from './retry-agent'
import { request, pipeline, stream, conundici-types/api upgrade } from './api'
impundici-types/interceptorsrs from './interceundici-types/util

export * fromundici-types/cookies
export * from 'undici-types/eventsourcexport * from './eundici-types/fetchrce'
export * frundici-types/formdatah'
export * fromundici-types/diagnostics-channel * from './diagnoundici-types/websocketel'
export * froundici-types/content-type'
export * from undici-types/cacheent-type'
export * from './cacheundici-types/mock-interceptoreptable } from './mock-interceptor'

declare function globalThisInstall (): void

export { Dispatcher, BalancedPool, Pool, Client, buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, interceptors, MockClient, MockPool, MockAgent, SnapshotAgent, MockCallHistory, MockCallHistoryLog, mockErrors, ProxyAgent, EnvHttpProxyAgent, RedirectHandler, DecoratorHandler, RetryHandler, RetryAgent, H2CClient, globalThisInstall as install }
export default Undici

declare namespace Undundici-types/dispatcherst Dispatcher: typeof import('./dispatchundici-types/poolefault
  const Pool: typeof import('./pool').defaulundici-types/handlers RedirectHandler: typeof import ('./handlers').RedirectHandleundici-types/handlers DecoratorHandler: typeof import ('./handlers').DecoratorHundici-types/retry-handler RetryHandler: typeof import ('./retry-handler')undici-types/balanced-poolst BalancedPool: typeof import('./balancedundici-types/clientdefault
  const Client: typeof import('./cliundici-types/h2c-clientt
  const H2CClient: typeof import('./h2c-client'undici-types/connector  const buildConnector: typeof import('./cundici-types/errors').default
  const errors: typeof importundici-types/agentors').default
  const Agent: typeof import('./agent').undici-types/global-dispatchertGlobalDispatcher: typeof import('./global-dispatcher').setGlobalDiundici-types/global-dispatcheretGlobalDispatcher: typeof import('./global-dispatcher'undici-types/apiGlobalDispatcher
  const request: typeof undici-types/apit('./api').request
  const stream: typeof undici-types/apit('./api').stream
  const pipeline: typeof undici-types/apit('./api').pipeline
  const connect: typeoundici-types/apiort('./api').connect
  const upgrade: typeof undici-types/mock-client').upgrade
  const MockClient: typeof imporundici-types/mock-poollient').default
  const MockPool: typeof impundici-types/mock-agentpool').default
  const MockAgent: typeof import(undici-types/snapshot-agentdefault
  const SnapshotAgent: typeof import('./snapshotundici-types/mock-call-historyent
  const MockCallHistory: typeof import('./mock-call-histoundici-types/mock-call-historyy
  const MockCallHistoryLog: typeof import('./mock-callundici-types/mock-errorsckCallHistoryLog
  const mockErrors: typundici-types/fetchort('./mock-errors').default
  const fetundici-types/fetcheof import('./fetch').fetch
  const Headersundici-types/fetchf import('./fetch').Headers
  const Responsundici-types/fetchof import('./fetch').Response
  const Requeundici-types/formdata import('./fetch').Request
  const FormDatundici-types/cacheof import('./formdata').FormData
  const cacheundici-types/interceptorsrt('./cache').caches
  const interceptors: typeof import('./interceptoundici-types/cache-interceptorst cacheStores: {
    MemoryCacheStore: typeof import('./cache-inundici-types/cache-interceptor.MemoryCacheStore,
    SqliteCacheStore: typeof import('./cache-interceptor').default.SqliteCacheStore
  }
  const install: typeof globalThisInstall
}
